# This runs star on the files from the samples document can be single or paired end

# Function to return paths of input files
def _get_input(wildcards):
    if wildcards.trim_method == "no":
        # Grab path of the fastq file
        fastq1 = SAMPLE_LIST.loc[wildcards.sample, "fastq1"]
        data_dir = SAMPLE_LIST.loc[wildcards.sample, "data_dir"]
        fastq1 = os.path.join(data_dir, fastq1)
        # Make sure file exists
        fastq1  = _check_path(fastq1)
        if IS_PAIRED:
            # Grab path of second read
            fastq2 = SAMPLE_LIST.loc[wildcards.sample, "fastq2"]
            fastq2 = os.path.join(data_dir, fastq2)
            # Make sure file exists
            fastq2 = _check_path(fastq2)
            return(fastq1, fastq2)
        else:
            return(fastq1)
    else:
        # Grab path of the fastq file
        fastq1 = (wildcards.results + "/" + wildcards.trim_method + "_trim/" +
            wildcards.sample + "_R1_trimmed.fastq.gz")
        if IS_PAIRED:
            # Grab path of second read
            fastq2 = (wildcards.results + "/" + wildcards.trim_method + "_trim/" +
                wildcards.sample + "_R2_trimmed.fastq.gz")
            return(fastq1, fastq2)
        else:
            return(fastq1)

rule align:
    input:
        "{results}/{trim_method}_trim/{sample}.txt",
        "{results}/fastqc_{trim_method}_summary_trimmed.tsv"
    output:
        bam_output = "{results}/star_{trim_method}_trim/{sample}_Aligned.sortedByCoord.out.bam",
        log_output = "{results}/star_{trim_method}_trim/{sample}_Log.final.out"
    params:
        job_name      = "{sample}_star",
        memory        = "select[mem>60] rusage[mem=60]",
        genome        = GENOME,
        gtf           = GTF,
        output_prefix = "{results}/star_{trim_method}_trim/{sample}_",
        fastqs        = _get_input
    log:
        "{results}/logs/star/star_{sample}_{trim_method}_trim"
    message:
        "Aligning reads for {wildcards.sample}"
    threads:
        6
    singularity:
       GENERAL_CONTAINER
    shell:  
        """
        STAR \
            --runThreadN {threads} \
            --genomeDir {params.genome} \
            --sjdbGTFfile {params.gtf} \
            --readFilesIn {params.fastqs} \
            --readFilesCommand zcat \
            --outSAMtype BAM SortedByCoordinate \
            --outFileNamePrefix {params.output_prefix}
        """


# Create STAR alignment summary
rule star_summary:
    input:
        expand(
            "{results}/star_{trim_method}_trim/{sample}_Log.final.out",
            results = RESULTS, sample = SAMPLES,
            trim_method = TRIM_METHOD
        )
    output:
        "{results}/star_summary_{trim_method}_trim.tsv"
    params:
        job_name    = "star_summary",
        memory      = "select[mem>4] rusage[mem=4]"
    log:
        "{results}/logs/star/star_summary_{trim_method}_trim"
    message:
        "Creating STAR alignment summary"
    threads:
        1
    singularity:
       GENERAL_CONTAINER
    script:
        "../scripts/starStats.py"
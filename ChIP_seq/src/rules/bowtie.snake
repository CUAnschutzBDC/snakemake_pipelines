# This runs bowtie on the files from the samples document can be single or paired end
# It also removes duplicate reads, keeps only properly paired reads that are the primary 
# aligment, and removes multimappers (XS flag in bowtie2)

# Function to return paths of input files
def _get_input(wildcards):
    # Grab path of the fastq file
    fastq1 = SAMPLE_LIST.loc[wildcards.sample, "fastq1"]
    data_dir = SAMPLE_LIST.loc[wildcards.sample, "data_dir"]
    fastq1 = data_dir + "/" + fastq1
    # Make sure file exists
    fastq1  = _check_path(fastq1)
    if IS_PAIRED:
        # Grab path of second read
        fastq2 = SAMPLE_LIST.loc[wildcards.sample, "fastq2"]
        fastq2 = data_dir + "/" + fastq2
        # Make sure file exists
        fastq2 = _check_path(fastq2)
        return(fastq1, fastq2)
    else:
        return(fastq1)

def _get_input_star(wildcards):
    # Grab path of the fastq file
    fastq1 = (wildcards.results + "/" + wildcards.trim_method + "_trim/" +
        wildcards.sample + "_R1_trimmed.fastq.gz")
    if IS_PAIRED:
        # Grab path of second read
        fastq2 = (wildcards.results + "/" + wildcards.trim_method + "_trim/" +
            wildcards.sample + "_R2_trimmed.fastq.gz")
        return(fastq1, fastq2)
    else:
        return(fastq1)

rule align:
    input:
        "{results}/{trim_method}_trim/{sample}.txt"
    output:
        sam_output = "{results}/bowtie2_{trim_method}_trim/{sample}_Aligned.out.sam"
    params:
        job_name      = "{sample}_bowtie2",
        memory        = "select[mem>60] rusage[mem=60]",
        genome        = GENOME,
        fastqs_trim   = _get_input_star,
        fastqs        = _get_input
    log:
        "{results}/logs/bowtie2/{sample}_{trim_method}_trim"
    message:
        "Aligning reads for {wildcards.sample}"
    threads:
        6
    run:
        if wildcards.trim_method == "no":
            fastqs = params.fastqs
        else:
            fastqs = params.fastqs_trim
        if IS_PAIRED:
            shell(    
                """
                perl_loc=$(which perl)

                bowtie2 \
                -p {threads} -q --local \
                -x {params.genome} \
                -1 {fastqs[0]} -2 {fastqs[1]} \
                -S {output.sam_output}
                """
            )
        else:
            shell(    
                """                
                bowtie2 \
                -p {threads} -q --local \
                -x {params.genome} \
                -U {fastqs[0]} \
                -S {output.sam_output}
                """
            )


rule sorted_bam:
    input:
        "{results}/bowtie2_{trim_method}_trim/{sample}_Aligned.out.sam"
    output:
        bam_output = "{results}/bowtie2_{trim_method}_trim/{sample}_Aligned.SortedByCoord.unique.out.bam",
        bai_output = "{results}/bowtie2_{trim_method}_trim/{sample}_Aligned.SortedByCoord.unique.out.bam.bai"
    params:
        job_name = "{sample}_sorted_bam",
        memory   = "select[mem>60] rusage[mem=60]",
        temp_bam_one = "{results}/bowtie2_{trim_method}_trim/{sample}_temp.bam",
        temp_bam_two = "{results}/bowtie2_{trim_method}_trim/{sample}_temp2.bam"
    log:
       "{results}/logs/sorted_bam/{sample}_{trim_method}_trim"
    threads:
        5
    shell:
        """
        samtools view -h -S -b \
        -o {params.temp_bam_one} \
        {input}

        sambamba sort -t {threads} \
        -o {output.bam_output} {params.temp_bam_one}

        samtools index {output.bam_output}

        rm {params.temp_bam_one}
        """

#-S means input is SAM, no longer needed
#-h means include header
#-f Only output alignments with bit set to int (2 means read mapped in proper pair)
#-F Don't output alignments with bits set in int (256 means not primary alignment)

#I also need to remove duplicates so that would be -F 1280

# Previous
        # samtools view -h -S -b \
        # -o {params.temp_bam_one} \
        # {input}

        # samtools sort \
        # -o {params.temp_bam_two} \
        # {params.temp_bam_one}

        ## Also tried -F 256
        # samtools view -h -f2 -F 1280 \
        # {params.temp_bam_two} | \
        # grep -v "XS:i:" | \
        # samtools view -hb -o {output.bam_output}

        # samtools index {output.bam_output}

        # rm {params.temp_bam_one} {params.temp_bam_two}


# Sambamba previous
        # samtools view -h -S -b \
        # -o {params.temp_bam_one} \
        # {input}

        # sambamba sort -t {threads} \
        # -o {params.temp_bam_two} {params.temp_bam_one}

        # sambamba view -h -t {threads} \
        # -f bam -F "[XS] == null and not unmapped" \
        # {params.temp_bam_two} > {output.bam_output}

        # samtools index {output.bam_output}

        # rm {params.temp_bam_one} {params.temp_bam_two}